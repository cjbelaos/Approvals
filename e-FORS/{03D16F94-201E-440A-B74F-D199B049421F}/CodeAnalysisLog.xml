<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\professional\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Users\B012128\AppData\Local\Temp\tmp4D60.tmp.cadir\bin\App_Code.dll">
   <Modules>
    <Module Name="app_code.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="dsEFORS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_FarmOutDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_FarmOutDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_FarmOutDetailsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_FarmOutDetailsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_GetItemsForPEZA8112DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_GetItemsForPEZA8112DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_ItemsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_ItemsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_ItemsWithNothingFollowsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_ItemsWithNothingFollowsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable1DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable1DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable2DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable2DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable3DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable3DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable4DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable4DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable5DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable5DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="EPPIAuthorizedSignatoryMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'EPPIAuthorizedSignatoryMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'EPPIAuthorizedSignatoryMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FarmOutDocumentsMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'FarmOutDocumentsMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'FarmOutDocumentsMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CheckIfWithContainer(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="606">'FarmOutDocumentsMaintenance.CheckIfWithContainer(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfWithItemContainer(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="686">'FarmOutDocumentsMaintenance.CheckIfWithItemContainer(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfWithLOA(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="646">'FarmOutDocumentsMaintenance.CheckIfWithLOA(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAuthorizedOfficial(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="471">'FarmOutDocumentsMaintenance.GetAuthorizedOfficial(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGatepassForPrint(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="405">'FarmOutDocumentsMaintenance.GetGatepassForPrint(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemContainers(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="504">'FarmOutDocumentsMaintenance.GetItemContainers(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemSealNo(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="537">'FarmOutDocumentsMaintenance.GetItemSealNo(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PrintLOA8106(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="438">'FarmOutDocumentsMaintenance.PrintLOA8106(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReassignTask(System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="316">'FarmOutDocumentsMaintenance.ReassignTask(string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestChange(System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="284">'FarmOutDocumentsMaintenance.RequestChange(string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutDocumentsApproval(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="376">'FarmOutDocumentsMaintenance.SaveFarmOutDocumentsApproval(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FarmOutRequestFormMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'FarmOutRequestFormMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'FarmOutRequestFormMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FarmOutRequestFormApprovalChecking(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="162">'FarmOutRequestFormMaintenance.FarmOutRequestFormApprovalChecking(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOut(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="33">'FarmOutRequestFormMaintenance.GetFarmOut(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="37">'FarmOutRequestFormMaintenance.GetFarmOut(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFiles(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="124">'FarmOutRequestFormMaintenance.GetFiles(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFiles(FileDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="94">'FarmOutRequestFormMaintenance.SaveFiles(FileDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LOAMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'LOAMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'LOAMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Maintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'Maintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'Maintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddLOA(LOADetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1277">'Maintenance.AddLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPrinted8112(Printed8112)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1729">'Maintenance.AddPrinted8112(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSupplier(SupplierDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1170">'Maintenance.AddSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Approval(Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="547">'Maintenance.Approval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfBypassAccount(LoginDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="919">'Maintenance.CheckIfBypassAccount(LoginDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteFile(FileDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1573">'Maintenance.DeleteFile(FileDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteItem(Items)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="512">'Maintenance.DeleteItem(Items)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteLOA(LOADetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1327">'Maintenance.DeleteLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteSupplier(SupplierDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1212">'Maintenance.DeleteSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FinishTaskChecking(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="221">'Maintenance.FinishTaskChecking(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get8112Dates(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1108">'Maintenance.Get8112Dates(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllTasks()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="122">'Maintenance.GetAllTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAssignedForRequestChange(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="260">'Maintenance.GetAssignedForRequestChange(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetControlNoOf8112WithSameLOA(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1076">'Maintenance.GetControlNoOf8112WithSameLOA(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCtrlNoPrinted8112(Printed8112)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1759">'Maintenance.GetCtrlNoPrinted8112(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDocumentFormat()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1415">'Maintenance.GetDocumentFormat()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEPPIAuthorizedSignatory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1443">'Maintenance.GetEPPIAuthorizedSignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOutDetailsCreatorandApprover(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="961">'Maintenance.GetFarmOutDetailsCreatorandApprover(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOutDocument(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1387">'Maintenance.GetFarmOutDocument(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinishedTasks()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="188">'Maintenance.GetFinishedTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemType(SupplierDetails,LOADetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1357">'Maintenance.GetItemType(SupplierDetails, LOADetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOA()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1239">'Maintenance.GetLOA()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOAofSupplierInControlNo(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1023">'Maintenance.GetLOAofSupplierInControlNo(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOAReport(ReportDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1856">'Maintenance.GetLOAReport(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMultipleUOM(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1821">'Maintenance.GetMultipleUOM(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMyTasks(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="157">'Maintenance.GetMyTasks(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMyTasksCount(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="861">'Maintenance.GetMyTasksCount(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPreparedby()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1471">'Maintenance.GetPreparedby()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRequestCreator(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="577">'Maintenance.GetRequestCreator(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSBofSupplierInControlNo(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1046">'Maintenance.GetSBofSupplierInControlNo(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSumofQty8112Items(Printed8112)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1790">'Maintenance.GetSumofQty8112Items(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSuppliers()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1148">'Maintenance.GetSuppliers()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTotalQuantityWithUnitOfMeasurement(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="992">'Maintenance.GetTotalQuantityWithUnitOfMeasurement(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUser(LoginDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="88">'Maintenance.GetUser(LoginDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReassignTask(Approval,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="627">'Maintenance.ReassignTask(Approval, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutDocuments(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1516">'Maintenance.SaveFarmOutDocuments(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutDocumentsApproval(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1545">'Maintenance.SaveFarmOutDocumentsApproval(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutRequestForm(FarmOutDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="329">'Maintenance.SaveFarmOutRequestForm(FarmOutDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEmail(EmailDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1700">'Maintenance.SendEmail(EmailDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateLOA(LOADetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1307">'Maintenance.UpdateLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateSupplier(SupplierDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1192">'Maintenance.UpdateSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\B012128\AppData\Local\Temp\tmp4D60.tmp.cadir\bin\App_Web_2332srwm.dll">
   <Modules>
    <Module Name="app_web_2332srwm.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="GatepassPrint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="GatepassPrint.aspx.cs" Line="88">Object 'reportDocument' can be disposed more than once in method 'GatepassPrint.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 88</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PEZA8110Print" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="PEZA8110Print.aspx.cs" Line="77">Object 'reportDocument' can be disposed more than once in method 'PEZA8110Print.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 77</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PEZA8112Print" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="PEZA8112Print.aspx.cs" Line="70">Object 'reportDocument' can be disposed more than once in method 'PEZA8112Print.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 70</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RequestFormPrint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="RequestFormPrint.aspx.cs" Line="54">Object 'reportDocument' can be disposed more than once in method 'RequestFormPrint.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 54</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestPrint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="PEZA8106Print.aspx.cs" Line="96">Object 'reportDocument' can be disposed more than once in method 'TestPrint.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 96</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\B012128\AppData\Local\Temp\tmp4D60.tmp.cadir\bin\App_Web_bdztzok0.dll">
   <Modules>
    <Module Name="app_web_bdztzok0.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="Testing" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#createExcelFile(System.Data.DataSet,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2022-08-23 03:17:01Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="Testing.aspx.cs" Line="300">'Testing.createExcelFile(DataSet, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 54</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
