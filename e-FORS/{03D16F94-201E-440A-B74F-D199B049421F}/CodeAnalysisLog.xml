<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\professional\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Users\B012128\AppData\Local\Temp\tmpFAEA.tmp.cadir\bin\App_Code.dll">
   <Modules>
    <Module Name="app_code.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="dsEFORS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_FarmOutDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_FarmOutDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_FarmOutDetailsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_FarmOutDetailsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_GetItemsForPEZA8112DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_GetItemsForPEZA8112DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_ItemsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_ItemsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsEFORS+sp_ItemsWithNothingFollowsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsEFORS.sp_ItemsWithNothingFollowsDataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable1DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable1DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable2DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable2DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable3DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable3DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable4DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable4DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="dsGatepass+DataTable5DataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'dsGatepass.DataTable5DataTable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="EPPIAuthorizedSignatoryMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'EPPIAuthorizedSignatoryMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'EPPIAuthorizedSignatoryMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FarmOutDocumentsMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'FarmOutDocumentsMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'FarmOutDocumentsMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Approval(LCApproval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="307">'FarmOutDocumentsMaintenance.Approval(LCApproval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="311">'FarmOutDocumentsMaintenance.Approval(LCApproval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfWithContainer(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="660">'FarmOutDocumentsMaintenance.CheckIfWithContainer(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="664">'FarmOutDocumentsMaintenance.CheckIfWithContainer(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfWithItemContainer(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="744">'FarmOutDocumentsMaintenance.CheckIfWithItemContainer(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="748">'FarmOutDocumentsMaintenance.CheckIfWithItemContainer(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfWithLOA(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="702">'FarmOutDocumentsMaintenance.CheckIfWithLOA(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="706">'FarmOutDocumentsMaintenance.CheckIfWithLOA(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FarmOutDocumentsControlNoChecking(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="618">'FarmOutDocumentsMaintenance.FarmOutDocumentsControlNoChecking(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="622">'FarmOutDocumentsMaintenance.FarmOutDocumentsControlNoChecking(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAuthorizedOfficial(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="513">'FarmOutDocumentsMaintenance.GetAuthorizedOfficial(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="517">'FarmOutDocumentsMaintenance.GetAuthorizedOfficial(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDocumentFormattobeUsed()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="106">'FarmOutDocumentsMaintenance.GetDocumentFormattobeUsed()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="110">'FarmOutDocumentsMaintenance.GetDocumentFormattobeUsed()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEPPIAuthorizedSignatory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="140">'FarmOutDocumentsMaintenance.GetEPPIAuthorizedSignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="144">'FarmOutDocumentsMaintenance.GetEPPIAuthorizedSignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOutDocument(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="410">'FarmOutDocumentsMaintenance.GetFarmOutDocument(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="414">'FarmOutDocumentsMaintenance.GetFarmOutDocument(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGatepassForPrint(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="478">'FarmOutDocumentsMaintenance.GetGatepassForPrint(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="482">'FarmOutDocumentsMaintenance.GetGatepassForPrint(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemContainers(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="548">'FarmOutDocumentsMaintenance.GetItemContainers(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="552">'FarmOutDocumentsMaintenance.GetItemContainers(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemSealNo(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="583">'FarmOutDocumentsMaintenance.GetItemSealNo(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="587">'FarmOutDocumentsMaintenance.GetItemSealNo(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOANo(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="175">'FarmOutDocumentsMaintenance.GetLOANo(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="179">'FarmOutDocumentsMaintenance.GetLOANo(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPEZASignatory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="38">'FarmOutDocumentsMaintenance.GetPEZASignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="42">'FarmOutDocumentsMaintenance.GetPEZASignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPreparedby()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="72">'FarmOutDocumentsMaintenance.GetPreparedby()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="76">'FarmOutDocumentsMaintenance.GetPreparedby()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSuretyBondNo(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="210">'FarmOutDocumentsMaintenance.GetSuretyBondNo(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="214">'FarmOutDocumentsMaintenance.GetSuretyBondNo(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReassignTask(LCApproval,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="376">'FarmOutDocumentsMaintenance.ReassignTask(LCApproval, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="380">'FarmOutDocumentsMaintenance.ReassignTask(LCApproval, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestChange(LCApproval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="341">'FarmOutDocumentsMaintenance.RequestChange(LCApproval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="345">'FarmOutDocumentsMaintenance.RequestChange(LCApproval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutDocuments(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="274">'FarmOutDocumentsMaintenance.SaveFarmOutDocuments(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="278">'FarmOutDocumentsMaintenance.SaveFarmOutDocuments(string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutDocumentsApproval(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="444">'FarmOutDocumentsMaintenance.SaveFarmOutDocumentsApproval(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutDocumentsMaintenance.cs" Line="448">'FarmOutDocumentsMaintenance.SaveFarmOutDocumentsApproval(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FarmOutRequestFormMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'FarmOutRequestFormMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'FarmOutRequestFormMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DeleteFile(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="151">'FarmOutRequestFormMaintenance.DeleteFile(string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FarmOutRequestFormApprovalChecking(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="193">'FarmOutRequestFormMaintenance.FarmOutRequestFormApprovalChecking(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOut(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="35">'FarmOutRequestFormMaintenance.GetFarmOut(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFiles(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="122">'FarmOutRequestFormMaintenance.GetFiles(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFiles(FileDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="FarmOutRequestFormMaintenance.cs" Line="92">'FarmOutRequestFormMaintenance.SaveFiles(FileDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LOAMaintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'LOAMaintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'LOAMaintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Maintenance" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'Maintenance' because it creates members of the following IDisposable types: 'SqlConnection'. If 'Maintenance' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddLOA(LOADetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1967">'Maintenance.AddLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1971">'Maintenance.AddLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPrinted8112(Printed8112)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2646">'Maintenance.AddPrinted8112(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2650">'Maintenance.AddPrinted8112(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSupplier(SupplierDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1829">'Maintenance.AddSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1833">'Maintenance.AddSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Approval(Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1021">'Maintenance.Approval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1025">'Maintenance.Approval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CancelRequest(Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2965">'Maintenance.CancelRequest(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2969">'Maintenance.CancelRequest(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckAuthorization(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1530">'Maintenance.CheckAuthorization(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1534">'Maintenance.CheckAuthorization(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfApproveByRequestor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="583">'Maintenance.CheckIfApproveByRequestor(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="587">'Maintenance.CheckIfApproveByRequestor(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfBypassAccount(LoginDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1572">'Maintenance.CheckIfBypassAccount(LoginDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1576">'Maintenance.CheckIfBypassAccount(LoginDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfCancelled(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="499">'Maintenance.CheckIfCancelled(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="503">'Maintenance.CheckIfCancelled(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfFinishedRequestor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="541">'Maintenance.CheckIfFinishedRequestor(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="545">'Maintenance.CheckIfFinishedRequestor(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckPurposeOfItemIfWithLOA(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2540">'Maintenance.CheckPurposeOfItemIfWithLOA(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2544">'Maintenance.CheckPurposeOfItemIfWithLOA(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteFile(FileDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2430">'Maintenance.DeleteFile(FileDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2434">'Maintenance.DeleteFile(FileDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteItem(Items)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="987">'Maintenance.DeleteItem(Items)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="991">'Maintenance.DeleteItem(Items)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteLOA(LOADetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2039">'Maintenance.DeleteLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2043">'Maintenance.DeleteLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteSupplier(SupplierDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1893">'Maintenance.DeleteSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1897">'Maintenance.DeleteSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FarmOutDocumentsControlNoChecking(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2464">'Maintenance.FarmOutDocumentsControlNoChecking(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2468">'Maintenance.FarmOutDocumentsControlNoChecking(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FinishTaskChecking(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="456">'Maintenance.FinishTaskChecking(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="460">'Maintenance.FinishTaskChecking(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get8112Dates(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1755">'Maintenance.Get8112Dates(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1759">'Maintenance.Get8112Dates(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllItems(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="830">'Maintenance.GetAllItems(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="834">'Maintenance.GetAllItems(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllTasks()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="91">'Maintenance.GetAllTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="95">'Maintenance.GetAllTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetApproval(Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1258">'Maintenance.GetApproval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1262">'Maintenance.GetApproval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAssignedForRequestChange(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="625">'Maintenance.GetAssignedForRequestChange(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="629">'Maintenance.GetAssignedForRequestChange(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCancelledTasks()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="264">'Maintenance.GetCancelledTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="268">'Maintenance.GetCancelledTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetControlNoOf8112WithSameLOA(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1720">'Maintenance.GetControlNoOf8112WithSameLOA(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1724">'Maintenance.GetControlNoOf8112WithSameLOA(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCtrlNoPrinted8112(Printed8112)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2680">'Maintenance.GetCtrlNoPrinted8112(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2684">'Maintenance.GetCtrlNoPrinted8112(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDocumentFormat()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2252">'Maintenance.GetDocumentFormat()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2256">'Maintenance.GetDocumentFormat()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEPPIAuthorizedSignatory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2286">'Maintenance.GetEPPIAuthorizedSignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2290">'Maintenance.GetEPPIAuthorizedSignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOut(ReportDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1425">'Maintenance.GetFarmOut(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1429">'Maintenance.GetFarmOut(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOutDetailsCreatorandApprover(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1614">'Maintenance.GetFarmOutDetailsCreatorandApprover(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1618">'Maintenance.GetFarmOutDetailsCreatorandApprover(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFarmOutDocument(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2218">'Maintenance.GetFarmOutDocument(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2222">'Maintenance.GetFarmOutDocument(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinished8112LOANOs()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="353">'Maintenance.GetFinished8112LOANOs()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="357">'Maintenance.GetFinished8112LOANOs()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinished8112Purpose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="387">'Maintenance.GetFinished8112Purpose()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="391">'Maintenance.GetFinished8112Purpose()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinished8112Suppliers()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="421">'Maintenance.GetFinished8112Suppliers()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="425">'Maintenance.GetFinished8112Suppliers()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinished8112Tasks(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="319">'Maintenance.GetFinished8112Tasks(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="323">'Maintenance.GetFinished8112Tasks(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinishedTasks()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="195">'Maintenance.GetFinishedTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="199">'Maintenance.GetFinishedTasks()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinishedTasksPerSection(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="230">'Maintenance.GetFinishedTasksPerSection(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="234">'Maintenance.GetFinishedTasksPerSection(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGatepass(ReportDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1387">'Maintenance.GetGatepass(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1391">'Maintenance.GetGatepass(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemType(SupplierDetails,LOADetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2183">'Maintenance.GetItemType(SupplierDetails, LOADetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2187">'Maintenance.GetItemType(SupplierDetails, LOADetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLiquidationLedger(ReportDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2824">'Maintenance.GetLiquidationLedger(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2828">'Maintenance.GetLiquidationLedger(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLiquidationLedgerInfo(LiquidationLedgerDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2863">'Maintenance.GetLiquidationLedgerInfo(LiquidationLedgerDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2867">'Maintenance.GetLiquidationLedgerInfo(LiquidationLedgerDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOA()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1926">'Maintenance.GetLOA()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1930">'Maintenance.GetLOA()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOADetails(LOADetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2147">'Maintenance.GetLOADetails(LOADetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2151">'Maintenance.GetLOADetails(LOADetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOAInventoryDetails(LOAInventoryDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2112">'Maintenance.GetLOAInventoryDetails(LOAInventoryDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2116">'Maintenance.GetLOAInventoryDetails(LOAInventoryDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOAInvetory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2072">'Maintenance.GetLOAInvetory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2076">'Maintenance.GetLOAInvetory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOALimitPercentage(LOADetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2900">'Maintenance.GetLOALimitPercentage(LOADetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2904">'Maintenance.GetLOALimitPercentage(LOADetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOAofSupplierInControlNo(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1684">'Maintenance.GetLOAofSupplierInControlNo(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1688">'Maintenance.GetLOAofSupplierInControlNo(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLOAReport(ReportDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2789">'Maintenance.GetLOAReport(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2793">'Maintenance.GetLOAReport(ReportDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMultipleUOM(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2750">'Maintenance.GetMultipleUOM(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2754">'Maintenance.GetMultipleUOM(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMyTasks(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="161">'Maintenance.GetMyTasks(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="165">'Maintenance.GetMyTasks(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMyTasksCount(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1495">'Maintenance.GetMyTasksCount(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1499">'Maintenance.GetMyTasksCount(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPendingTasks(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="126">'Maintenance.GetPendingTasks(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="130">'Maintenance.GetPendingTasks(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPEZASignatory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2505">'Maintenance.GetPEZASignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2509">'Maintenance.GetPEZASignatory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPreparedby()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2320">'Maintenance.GetPreparedby()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2324">'Maintenance.GetPreparedby()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRequestCreator(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1056">'Maintenance.GetRequestCreator(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1060">'Maintenance.GetRequestCreator(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSectionDepartment(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="795">'Maintenance.GetSectionDepartment(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="799">'Maintenance.GetSectionDepartment(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSumofQty8112Items(Printed8112)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2715">'Maintenance.GetSumofQty8112Items(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2719">'Maintenance.GetSumofQty8112Items(Printed8112)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSuppliers()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1796">'Maintenance.GetSuppliers()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1800">'Maintenance.GetSuppliers()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTasksCount()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1459">'Maintenance.GetTasksCount()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1463">'Maintenance.GetTasksCount()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTotalQuantityWithUnitOfMeasurement(FarmOutDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1649">'Maintenance.GetTotalQuantityWithUnitOfMeasurement(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1653">'Maintenance.GetTotalQuantityWithUnitOfMeasurement(FarmOutDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUser(LoginDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="57">'Maintenance.GetUser(LoginDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="61">'Maintenance.GetUser(LoginDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUserInformation(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="760">'Maintenance.GetUserInformation(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="764">'Maintenance.GetUserInformation(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MarkAsPrinted(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2996">'Maintenance.MarkAsPrinted(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="3000">'Maintenance.MarkAsPrinted(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReassignTask(Approval,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1126">'Maintenance.ReassignTask(Approval, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1130">'Maintenance.ReassignTask(Approval, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveMarkAsPrinted(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="3027">'Maintenance.RemoveMarkAsPrinted(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="3031">'Maintenance.RemoveMarkAsPrinted(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestChange(Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1091">'Maintenance.RequestChange(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1095">'Maintenance.RequestChange(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveApproval(Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1191">'Maintenance.SaveApproval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1195">'Maintenance.SaveApproval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutDocuments(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2367">'Maintenance.SaveFarmOutDocuments(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2371">'Maintenance.SaveFarmOutDocuments(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutDocumentsApproval(FarmOutDocumentDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2399">'Maintenance.SaveFarmOutDocumentsApproval(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2403">'Maintenance.SaveFarmOutDocumentsApproval(FarmOutDocumentDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFarmOutRequestForm(FarmOutDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="690">'Maintenance.SaveFarmOutRequestForm(FarmOutDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="694">'Maintenance.SaveFarmOutRequestForm(FarmOutDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveMirrorApproval(Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1157">'Maintenance.SaveMirrorApproval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1161">'Maintenance.SaveMirrorApproval(Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveSupplier(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="869">'Maintenance.SaveSupplier(string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="873">'Maintenance.SaveSupplier(string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEmail(EmailDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2582">'Maintenance.SendEmail(EmailDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2586">'Maintenance.SendEmail(EmailDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEmailLOALimit(FarmOutDetails,Approval)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2933">'Maintenance.SendEmailLOALimit(FarmOutDetails, Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2937">'Maintenance.SendEmailLOALimit(FarmOutDetails, Approval)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEmailRequestApproved(EmailDetails)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2614">'Maintenance.SendEmailRequestApproved(EmailDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2618">'Maintenance.SendEmailRequestApproved(EmailDetails)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateApproval(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1224">'Maintenance.UpdateApproval(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1228">'Maintenance.UpdateApproval(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateItem(Items,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="956">'Maintenance.UpdateItem(Items, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="960">'Maintenance.UpdateItem(Items, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateLOA(LOADetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2008">'Maintenance.UpdateLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="2012">'Maintenance.UpdateLOA(LOADetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateSupplier(SupplierDetails,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1862">'Maintenance.UpdateSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS\App_Code" File="Maintenance.cs" Line="1866">'Maintenance.UpdateSupplier(SupplierDetails, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\B012128\AppData\Local\Temp\tmpFAEA.tmp.cadir\bin\App_Web_fw322ef2.dll">
   <Modules>
    <Module Name="app_web_fw322ef2.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="GatepassPrint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="GatepassPrint.aspx.cs" Line="72">Object 'reportDocument' can be disposed more than once in method 'GatepassPrint.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 72, 90</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="hn_DeleteFile" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRequest(System.Web.HttpContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="hn_DeleteFile.ashx" Line="56">'hn_DeleteFile.ProcessRequest(HttpContext)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="hn_FileUpload" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRequest(System.Web.HttpContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="hn_FileUpload.ashx" Line="50">'hn_FileUpload.ProcessRequest(HttpContext)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="hn_LiquidationLedger_ExcelFile" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessRequest(System.Web.HttpContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="hn_LiquidationLedger_ExcelFile.ashx" Line="129">'hn_LiquidationLedger_ExcelFile.ProcessRequest(HttpContext)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PEZA8110Print" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="PEZA8110Print.aspx.cs" Line="77">Object 'reportDocument' can be disposed more than once in method 'PEZA8110Print.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 77</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PEZA8112Print" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="PEZA8112Print.aspx.cs" Line="56">Object 'reportDocument' can be disposed more than once in method 'PEZA8112Print.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 56, 74</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PEZA8112PrintNew" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="PEZA8112PrintNew.aspx.cs" Line="57">Object 'reportDocument' can be disposed more than once in method 'PEZA8112PrintNew.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 57, 75</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RequestFormPrint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="RequestFormPrint.aspx.cs" Line="39">Object 'reportDocument' can be disposed more than once in method 'RequestFormPrint.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 39, 58</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestPrint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="PEZA8106Print.aspx.cs" Line="80">Object 'reportDocument' can be disposed more than once in method 'TestPrint.Page_Load(object, EventArgs)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 80, 98</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\B012128\AppData\Local\Temp\tmpFAEA.tmp.cadir\bin\App_Web_jj1u01ci.dll">
   <Modules>
    <Module Name="app_web_jj1u01ci.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="LiquidationLedger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateExcelFile(System.Data.DataTable,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="LiquidationLedger.aspx.cs" Line="178">'LiquidationLedger.CreateExcelFile(DataTable, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TasksJS" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetCtrlNos()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="TasksJS.aspx.cs" Line="59">Object 'conn' can be disposed more than once in method 'TasksJS.GetCtrlNos()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 59, 71</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="TasksJS.aspx.cs" Line="61">'TasksJS.GetCtrlNos()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="TasksJS.aspx.cs" Line="65">'TasksJS.GetCtrlNos()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestLOA" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#createExcelFile(System.Data.DataSet,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2023-02-01 03:01:43Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\inetpub\wwwroot\e-FORS\e-FORS" File="TestLOA.aspx.cs" Line="195">'TestLOA.createExcelFile(DataSet, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 57, 75</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
